# /etc/nginx/conf.d/wildcard-proxy.conf
# This file will be included by the default nginx.conf

# Define service-specific ports
map $service $upstream_port {
    default     80;    # Default port if not specified
    # app         3000;  # Your service-specific ports
    blog        80;
    api         8000;
    # Add more service:port mappings as needed
}

# Wildcard server block
server {
    listen 80;
    server_name ~^(?<service>.+)\.xurl\.fyi$;

    return 301 https://$host$request_uri;
    # location / {
    #     # Dynamic upstream configuration
    #     set $upstream http://$service:$upstream_port;
    #     proxy_pass $upstream;

    #     # Basic proxy settings
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;

    #     # Handle container unavailability
    #     proxy_connect_timeout 5s;
    #     proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    # }
}

server {
    listen 80;
    server_name xurl.fyi www.xurl.fyi;  # Your domain without wildcard subdomain
    return 301 https://$host$request_uri;

    # location /laravel {
    #     proxy_pass http://laravel-app:80;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # location /nodejs {
    #     proxy_pass http://nodejs-app:80;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

    # Default location if no specific route matches
    # location / {
    #     proxy_pass http://app:3000;
    #     # Preserve client info
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_set_header Host $host;

    #     # WebSockets support
    #     proxy_http_version 1.1;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection $connection_upgrade;
    #     proxy_buffering off;

    #     # Timeouts & upstream error handling
    #     proxy_connect_timeout 5s;
    #     proxy_next_upstream error timeout http_500 http_502 http_503 http_504;

    #     # Show maintenance page if backend is down
    #     error_page 502 503 504 /maintenance.html;
    # }

    # SSL configuration (if using SSL)
    # listen 443 ssl;
    # ssl_certificate /etc/nginx/certs/fullchain.pem;
    # ssl_certificate_key /etc/nginx/certs/privkey.pem;
}


server {
    listen 443 ssl;
    # http2;
    server_name xurl.fyi;

    ssl_certificate /etc/letsencrypt/live/xurl.fyi.fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xurl.fyi.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # map $http_upgrade $connection_upgrade {
    #     default upgrade;
    #     ''      close;
    # }
    # Proxy to app
    location / {
       proxy_pass http://app:3000;
        # Preserve client info
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $host;

        # WebSockets support
        proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection $connection_upgrade;
        proxy_buffering off;

        # Timeouts & upstream error handling
        proxy_connect_timeout 5s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;

        # Show maintenance page if backend is down
        error_page 502 503 504 /maintenance.html;
    }
    # Serve static files like CSS, JS, fonts from /var/www/html/static
    location /css/ {
        alias /usr/share/nginx/html/app1/static/;
        access_log off;
        expires max;
    }

    location /libs/ {
        alias /usr/share/nginx/html/app1/static/;
        access_log off;
        expires max;
    }

    location /scripts/ {
        alias /usr/share/nginx/html/app1/static/;
        access_log off;
        expires max;
    }

    location /fonts/ {
        alias /usr/share/nginx/html/app1/static/;
        access_log off;
        expires max;
    }
    # Serve images
    location /images/ {
        alias /usr/share/nginx/html/app1/static/;  # Use alias for image directory
        access_log off;
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }

    # Ensure correct MIME types for images
    location ~* \.(png|jpg|jpeg|gif|webp|svg)$ {
        root /usr/share/nginx/html/app1/static;  # Correct path to where your images are located
        expires 7d;
        add_header Cache-Control "public, max-age=604800";
    }
}



server {
    listen 443 ssl;
    server_name ~^(?<service>.+)\.xurl\.fyi$;

    ssl_certificate /etc/letsencrypt/live/xurl.fyi.fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/xurl.fyi.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    location / {
        # Dynamic upstream configuration
        set $upstream http://$service:$upstream_port;
        proxy_pass $upstream;

        # Basic proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Handle container unavailability
        proxy_connect_timeout 5s;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
    }
}