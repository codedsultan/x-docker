version: '3.8'

services:
  # Laravel Application
  blog:
    build:
      context: ../laravel
      dockerfile: Dockerfile
    container_name: laravel-app
    restart: unless-stopped
    volumes:
      - ../laravel:/var/www/html
    environment:
      - APP_ENV=production
      - DB_HOST=mysql
      - REDIS_HOST=redis
      - QUEUE_CONNECTION=redis
    depends_on:
      - mysql
      - redis
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # FastAPI Application
  api:
    build:
      context: ../fastapi
      dockerfile: Dockerfile
    container_name: fastapi-app
    restart: unless-stopped
    volumes:
      - ../fastapi:/app
    environment:
      - ENVIRONMENT=production
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Node.js Application
  app:
    image: ghcr.io/codedsultan/xurl:latest
    container_name: nodejs-app
    restart: unless-stopped
    volumes:
      - /var/www/apps/nodejs:/app
      - /var/www/apps/nodejs/db_data_sqlite:/var/lib/kutt
      - /var/www/apps/nodejs/custom:/kutt/custom 
    env_file:
      - /var/www/apps/nodejs/.env
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Nginx Service
  nginx:
    image: ghcr.io/codedsultan/ngnix-acme-namecom/ngnix-acme-namecom:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../laravel:/var/www/html
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/letsencrypt/live
    depends_on:
      - app
    networks:
      - app-network
    environment:
      - NAMECOM_USERNAME=${NAMECOM_USERNAME}
      - NAMECOM_TOKEN=${NAMECOM_TOKEN}
      - SLACK_MONITORING_WEB_HOOK=${SLACK_MONITORING_WEB_HOOK}
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # MySQL Service
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./mysql/data:/var/lib/mysql
      - ./mysql/conf.d:/etc/mysql/conf.d
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Redis Service
  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - ./redis/data:/data
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Laravel Queue Worker
  laravel-queue:
    build:
      context: ../laravel
      dockerfile: Dockerfile
    container_name: laravel-queue
    restart: unless-stopped
    command: php artisan queue:work
    depends_on:
      - blog
      - redis
    volumes:
      - ../laravel:/var/www/html
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
    ports:
      - "9090:9090"

  # Grafana (Monitoring UI)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472:472"  
    env_file:
      - .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    networks:
      - app-network
    ports:
      - "3000:3000"

  # Loki (Logging)
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/config.yml
    networks:
      - app-network
    ports:
      - "3100:3100"

  # Promtail (Log Collector)
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
    networks:
      - app-network

  # Alertmanager (For Notifications)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    networks:
      - app-network
    ports:
      - "9093:9093"

networks:
  app-network:
    driver: bridge
